/*
 *
 * Copyright SHMsoft, Inc. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
package org.freeeed.ui;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.*;

import org.freeeed.services.Settings;

/**
 *
 * @author mark
 */
public class EC2SetupUI extends javax.swing.JDialog {
    private Frame parent;
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private String[] instanceTypes = {"c1.medium", "c1.xlarge"};
    private String[] availabilityZones = {"us-east-1a",
        "us-east-1b", "us-east-1c", "us-east-1d", "eu-west-1c"};

    /**
     * Creates new form EC2SetupUI
     * @param parent
     * @param modal
     */
    public EC2SetupUI(final Frame parent, boolean modal) {        
        super(parent, modal);
        this.parent = parent;
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = rootPane.getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        securityGroupLabel = new javax.swing.JLabel();
        securityGroupText = new javax.swing.JTextField();
        keyPairNameLabel = new javax.swing.JLabel();
        keyPairNameText = new javax.swing.JTextField();
        pemCertificateLabel = new javax.swing.JLabel();
        showPemButton = new javax.swing.JButton();
        clusterSizeLabel = new javax.swing.JLabel();
        clusterSizeText = new javax.swing.JTextField();
        setupTimeoutLabel = new javax.swing.JLabel();
        setupTimeoutText = new javax.swing.JTextField();
        instanceTypeLabel = new javax.swing.JLabel();
        instanceTypeChoice = new javax.swing.JComboBox<>();
        availabilityZoneLabel = new javax.swing.JLabel();
        availabilityZoneChoice = new javax.swing.JComboBox<String>();
        skipInstanceCreation = new javax.swing.JCheckBox();

        setTitle("EC2 setup");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        securityGroupLabel.setText("Security group");

        keyPairNameLabel.setText("Key pair name");

        pemCertificateLabel.setText("PEM certificate");

        showPemButton.setText("Show");
        showPemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPemButtonActionPerformed(evt);
            }
        });

        clusterSizeLabel.setText("Cluster size");

        setupTimeoutLabel.setText("Setup timeout");

        setupTimeoutText.setToolTipText("<html>If a cluster fails to start up in this many minutes, <br />\nthere may be a problem with EC2 - abandon the attempt.</html.");

        instanceTypeLabel.setText("Instance type");

        availabilityZoneLabel.setText("Availability zone");

        skipInstanceCreation.setSelected(true);
        skipInstanceCreation.setText("Skip instance creation (use already started machines, usually spot instances)");
        skipInstanceCreation.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyPairNameLabel)
                            .addComponent(pemCertificateLabel)
                            .addComponent(securityGroupLabel)
                            .addComponent(instanceTypeLabel)
                            .addComponent(availabilityZoneLabel)
                            .addComponent(setupTimeoutLabel)
                            .addComponent(clusterSizeLabel))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clusterSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(instanceTypeChoice, 0, 266, Short.MAX_VALUE)
                                .addComponent(showPemButton)
                                .addComponent(availabilityZoneChoice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(keyPairNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                                .addComponent(securityGroupText))
                            .addComponent(setupTimeoutText, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(skipInstanceCreation))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(securityGroupLabel)
                    .addComponent(securityGroupText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyPairNameLabel)
                    .addComponent(keyPairNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pemCertificateLabel)
                    .addComponent(showPemButton))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instanceTypeLabel)
                    .addComponent(instanceTypeChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availabilityZoneChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availabilityZoneLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clusterSizeLabel)
                    .addComponent(clusterSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setupTimeoutLabel)
                    .addComponent(setupTimeoutText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(skipInstanceCreation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        rootPane.setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (!collectData()) {
            return;
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void showPemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPemButtonActionPerformed
        PemUI ui = new PemUI(parent, true);
        ui.setVisible(true);
    }//GEN-LAST:event_showPemButtonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox<String> availabilityZoneChoice;
    private javax.swing.JLabel availabilityZoneLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel clusterSizeLabel;
    private javax.swing.JTextField clusterSizeText;
    private JComboBox<String> instanceTypeChoice;
    private javax.swing.JLabel instanceTypeLabel;
    private javax.swing.JLabel keyPairNameLabel;
    private javax.swing.JTextField keyPairNameText;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel pemCertificateLabel;
    private javax.swing.JLabel securityGroupLabel;
    private javax.swing.JTextField securityGroupText;
    private javax.swing.JLabel setupTimeoutLabel;
    private javax.swing.JTextField setupTimeoutText;
    private javax.swing.JButton showPemButton;
    private javax.swing.JCheckBox skipInstanceCreation;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    @Override
    public void setVisible(boolean b) {
        if (b) {
            showData();
        }
        super.setVisible(b);
    }

    private void showData() {
        Settings settings = Settings.getSettings();
        securityGroupText.setText(settings.getSecurityGroup());
        keyPairNameText.setText(settings.getKeyPair());
        instanceTypeChoice.setModel(new DefaultComboBoxModel<>(instanceTypes));
        instanceTypeChoice.setSelectedItem(settings.getInstanceType());
        availabilityZoneChoice.setModel(new DefaultComboBoxModel<>(availabilityZones));
        availabilityZoneChoice.setSelectedItem(settings.getAvailabilityZone());
        skipInstanceCreation.setSelected(settings.skipInstanceCreation());
    }

    private boolean collectData() {
        Settings settings = Settings.getSettings();
        String mes = "Please enter a valid cluster size";
        try {
            int clusterSize = Integer.parseInt(clusterSizeText.getText().trim());
            if (clusterSize < 1) {
                JOptionPane.showMessageDialog(rootPane, mes);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, mes + " " + e.getMessage());
            return false;
        }
        mes = "Please enter a valid cluster timetout in minutes";
        try {
            int clusterTimetout = Integer.parseInt(setupTimeoutText.getText().trim());
            if (clusterTimetout < 1) {
                JOptionPane.showMessageDialog(rootPane, mes);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, mes + " " + e.getMessage());
            return false;
        }

        settings.setSkipInstanceCreation(skipInstanceCreation.isSelected());
        settings.setSecurityGroup(securityGroupText.getText().trim());
        settings.setKeyPair(keyPairNameText.getText());
        settings.setInstanceType((String) instanceTypeChoice.getSelectedItem());
        settings.setAvailabilityZone((String) availabilityZoneChoice.getSelectedItem());
        return true;
    }
}
