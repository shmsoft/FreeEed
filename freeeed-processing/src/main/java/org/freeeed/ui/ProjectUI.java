/*
 *
 * Copyright SHMsoft, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.freeeed.ui;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.*;

import org.freeeed.db.DbLocalUtils;
import org.freeeed.services.Project;
import org.freeeed.services.Settings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author mark
 */
public class ProjectUI extends javax.swing.JDialog {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectUI.class);
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form ProcessingParametersUI
     *
     * @param parent
     * @param modal
     */
    public ProjectUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = rootPane.getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButtonGroup = new javax.swing.ButtonGroup();
        metadataButtonGroup = new javax.swing.ButtonGroup();
        dataSourceButtonGroup = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();
        inputsPanel = new javax.swing.JPanel();
        projectCodeLabel = new javax.swing.JLabel();
        projectCodeField = new javax.swing.JTextField();
        projectNameLabel = new javax.swing.JLabel();
        projectNameField = new javax.swing.JTextField();
        projectInputsLabel = new javax.swing.JLabel();
        networkHelpLabel = new javax.swing.JLabel();
        addFileButton = new javax.swing.JButton();
        addNetworkButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        projectInputsScrollPanel = new javax.swing.JScrollPane();
        projectInputsList = new javax.swing.JList();
        dataSourcePanel = new javax.swing.JPanel();
        dataSourceButton1 = new javax.swing.JRadioButton();
        dataSourceButton2 = new javax.swing.JRadioButton();
        loadFormatChoice = new javax.swing.JComboBox<>();
        stagingPanel = new javax.swing.JPanel();
        stagingZipSizeLabel = new javax.swing.JLabel();
        stagingZipSizeText = new javax.swing.JTextField();
        stageInPlaceCheck = new javax.swing.JCheckBox();
        explainButton = new javax.swing.JButton();
        metadataPanel = new javax.swing.JPanel();
        denistCheck = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        fieldSeparatorLabel = new javax.swing.JLabel();
        fieldSeparatorChoice = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        resultType = new javax.swing.JComboBox<>();
        labelMetadataCollected = new javax.swing.JLabel();
        standardMetadataRadio = new javax.swing.JRadioButton();
        allMetadataRadio = new javax.swing.JRadioButton();
        textInMetadataBox = new javax.swing.JCheckBox();
        ocrPanel = new javax.swing.JPanel();
        ocrCheck = new javax.swing.JCheckBox();
        cullingPanel = new javax.swing.JPanel();
        cullingLabel = new javax.swing.JLabel();
        helpLabel = new javax.swing.JLabel();
        cullingScrollPanel = new javax.swing.JScrollPane();
        cullingText = new javax.swing.JTextArea();
        imagingPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        createPdfImageCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        previewCheck = new javax.swing.JCheckBox();
        searchPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        luceneIndexEnabledRadioButton = new javax.swing.JRadioButton();
        solrIndexEnabledRadioButton = new javax.swing.JRadioButton();
        noIndexCreationRadioButton = new javax.swing.JRadioButton();
        cancelButton = new javax.swing.JButton();

        setTitle("Project Options");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        projectCodeLabel.setText("Project code");

        projectNameLabel.setText("Name");

        projectInputsLabel.setText("Add/Remove input data:");

        networkHelpLabel.setForeground(new java.awt.Color(0, 0, 255));
        networkHelpLabel.setText("Help");
        networkHelpLabel.setToolTipText("Click here for help on URI");
        networkHelpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                networkHelpLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                networkHelpLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                networkHelpLabelMousePressed(evt);
            }
        });

        addFileButton.setText("Add local folder or file");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        addNetworkButton.setText("Add network (URI) location");
        addNetworkButton.setToolTipText("<html>Add network location in the URI format. <br />\nExample of ftp access: <br />\nftp://user:password@ftp.example.com/path/file.zip\n</html>");
        addNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNetworkButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setToolTipText("Remove local folder or network location from project inputs - \nthe data itself remains intact");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        projectInputsScrollPanel.setViewportView(projectInputsList);

        dataSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data source"));

        dataSourceButtonGroup.add(dataSourceButton1);
        dataSourceButton1.setText("eDiscovery");
        dataSourceButton1.setToolTipText("<html>\nInput comes from \n<ul>\n<li> mail boxes</li>\n<li>loose files</li>\n<li>and any of the 1,400 files recognized by FreeEed for eDiscovery</li>\n</ul>\n</html>");
        dataSourceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSourceButton1ActionPerformed(evt);
            }
        });

        dataSourceButtonGroup.add(dataSourceButton2);
        dataSourceButton2.setText("Load file");
        dataSourceButton2.setToolTipText("<html>\nInput comes from production data<br/>\n<ul>\n<li>First, add the 'load file'</li>\n<li>Then, add the 'text' folder</li>\n</ul>\n</html>");
        dataSourceButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSourceButton2ActionPerformed(evt);
            }
        });

        loadFormatChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CSV", "DAT", "JSON" }));

        javax.swing.GroupLayout dataSourcePanelLayout = new javax.swing.GroupLayout(dataSourcePanel);
        dataSourcePanel.setLayout(dataSourcePanelLayout);
        dataSourcePanelLayout.setHorizontalGroup(
            dataSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataSourcePanelLayout.createSequentialGroup()
                .addComponent(dataSourceButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataSourceButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(loadFormatChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dataSourcePanelLayout.setVerticalGroup(
            dataSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataSourcePanelLayout.createSequentialGroup()
                .addGroup(dataSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataSourceButton1)
                    .addComponent(dataSourceButton2)
                    .addComponent(loadFormatChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout inputsPanelLayout = new javax.swing.GroupLayout(inputsPanel);
        inputsPanel.setLayout(inputsPanelLayout);
        inputsPanelLayout.setHorizontalGroup(
            inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(inputsPanelLayout.createSequentialGroup()
                            .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(projectCodeLabel)
                                .addComponent(projectNameLabel))
                            .addGap(27, 27, 27)
                            .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(projectCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(inputsPanelLayout.createSequentialGroup()
                            .addComponent(projectInputsLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addFileButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addNetworkButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(networkHelpLabel)
                            .addGap(30, 30, 30)
                            .addComponent(removeButton)))
                    .addComponent(projectInputsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputsPanelLayout.setVerticalGroup(
            inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectCodeLabel)
                    .addComponent(projectCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectInputsLabel)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addNetworkButton)
                    .addComponent(addFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(networkHelpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(projectInputsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(dataSourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        tabPanel.addTab("Inputs", inputsPanel);

        stagingZipSizeLabel.setText("Staging zip size, GB");

        stagingZipSizeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stagingZipSizeTextActionPerformed(evt);
            }
        });

        stageInPlaceCheck.setText("Read files directly");
        stageInPlaceCheck.setToolTipText("");

        explainButton.setText("Explain");
        explainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                explainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stagingPanelLayout = new javax.swing.GroupLayout(stagingPanel);
        stagingPanel.setLayout(stagingPanelLayout);
        stagingPanelLayout.setHorizontalGroup(
            stagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stagingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stagingZipSizeLabel)
                    .addComponent(stageInPlaceCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(stagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stagingPanelLayout.createSequentialGroup()
                        .addComponent(stagingZipSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(463, Short.MAX_VALUE))
                    .addGroup(stagingPanelLayout.createSequentialGroup()
                        .addComponent(explainButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        stagingPanelLayout.setVerticalGroup(
            stagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stagingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stagingZipSizeLabel)
                    .addComponent(stagingZipSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(stagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stageInPlaceCheck)
                    .addComponent(explainButton))
                .addContainerGap(362, Short.MAX_VALUE))
        );

        tabPanel.addTab("Staging", stagingPanel);

        denistCheck.setSelected(true);
        denistCheck.setText("Remove system files");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Metadata Properties"));

        fieldSeparatorLabel.setText("Field separator");

        fieldSeparatorChoice.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        fieldSeparatorChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSeparatorChoiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Load File Type");

        resultType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CSV", "DAT" }));
        resultType.setName(""); // NOI18N
        resultType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultTypeActionPerformed(evt);
            }
        });

        labelMetadataCollected.setText("Metadata collected");

        metadataButtonGroup.add(standardMetadataRadio);
        standardMetadataRadio.setSelected(true);
        standardMetadataRadio.setText("Standard");

        metadataButtonGroup.add(allMetadataRadio);
        allMetadataRadio.setText("All");

        textInMetadataBox.setText("Insert text in metadata");
        textInMetadataBox.setToolTipText("Useful for Concordance and Hive load");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fieldSeparatorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldSeparatorChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultType, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelMetadataCollected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(standardMetadataRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allMetadataRadio))
                    .addComponent(textInMetadataBox))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldSeparatorLabel)
                    .addComponent(fieldSeparatorChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(resultType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMetadataCollected)
                    .addComponent(standardMetadataRadio)
                    .addComponent(allMetadataRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textInMetadataBox))
        );

        javax.swing.GroupLayout metadataPanelLayout = new javax.swing.GroupLayout(metadataPanel);
        metadataPanel.setLayout(metadataPanelLayout);
        metadataPanelLayout.setHorizontalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(metadataPanelLayout.createSequentialGroup()
                        .addComponent(denistCheck)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        metadataPanelLayout.setVerticalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(denistCheck)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        tabPanel.addTab("Metadata", metadataPanel);

        ocrCheck.setSelected(true);
        ocrCheck.setText("Perform OCR");

        javax.swing.GroupLayout ocrPanelLayout = new javax.swing.GroupLayout(ocrPanel);
        ocrPanel.setLayout(ocrPanelLayout);
        ocrPanelLayout.setHorizontalGroup(
            ocrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ocrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ocrCheck)
                .addContainerGap(617, Short.MAX_VALUE))
        );
        ocrPanelLayout.setVerticalGroup(
            ocrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ocrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ocrCheck)
                .addContainerGap(397, Short.MAX_VALUE))
        );

        tabPanel.addTab("OCR", ocrPanel);

        cullingLabel.setText("Culling expressions");

        helpLabel.setForeground(new java.awt.Color(0, 0, 255));
        helpLabel.setText("Help");
        helpLabel.setToolTipText("<html>Each line is treated as a separate keyword or search expression<br>\nAll lines are considered as connected by a non-exclusive \"OR\"<br>\nField names are required, so for example you can have<br><br>\ncontent:email<br>\ncontent:data<br>\ntitle:meeting<br><br>\nFor the syntax of search expressions click on this \"Help\"</html>");
        helpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpLabelMousePressed(evt);
            }
        });

        cullingText.setColumns(20);
        cullingText.setRows(5);
        cullingScrollPanel.setViewportView(cullingText);

        javax.swing.GroupLayout cullingPanelLayout = new javax.swing.GroupLayout(cullingPanel);
        cullingPanel.setLayout(cullingPanelLayout);
        cullingPanelLayout.setHorizontalGroup(
            cullingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cullingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cullingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cullingScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                    .addGroup(cullingPanelLayout.createSequentialGroup()
                        .addComponent(cullingLabel)
                        .addGap(18, 18, 18)
                        .addComponent(helpLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        cullingPanelLayout.setVerticalGroup(
            cullingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cullingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cullingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cullingLabel)
                    .addComponent(helpLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cullingScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("Culling", cullingPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Imaging Properties"));

        createPdfImageCheckBox.setText("Create PDF Images, multi-page, for every file");

        jLabel2.setText("Control PDF image creation by changing the properties below");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createPdfImageCheckBox)
                    .addComponent(jLabel2))
                .addContainerGap(237, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createPdfImageCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        previewCheck.setText("Generate HTML documens for quick preview");
        previewCheck.setToolTipText("This option is for FreeEed Review. It generates HTML files for quick view");

        javax.swing.GroupLayout imagingPanelLayout = new javax.swing.GroupLayout(imagingPanel);
        imagingPanel.setLayout(imagingPanelLayout);
        imagingPanelLayout.setHorizontalGroup(
            imagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previewCheck)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        imagingPanelLayout.setVerticalGroup(
            imagingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previewCheck)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        tabPanel.addTab("Imaging", imagingPanel);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Index Properties"));

        searchButtonGroup.add(luceneIndexEnabledRadioButton);
        luceneIndexEnabledRadioButton.setText("Create Lucene index (for geeks)");

        searchButtonGroup.add(solrIndexEnabledRadioButton);
        solrIndexEnabledRadioButton.setText("Prepare Solr search");

        searchButtonGroup.add(noIndexCreationRadioButton);
        noIndexCreationRadioButton.setSelected(true);
        noIndexCreationRadioButton.setText("No Search");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noIndexCreationRadioButton)
                    .addComponent(solrIndexEnabledRadioButton)
                    .addComponent(luceneIndexEnabledRadioButton))
                .addGap(0, 449, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noIndexCreationRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solrIndexEnabledRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(luceneIndexEnabledRadioButton))
        );

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(318, Short.MAX_VALUE))
        );

        tabPanel.addTab("Search", searchPanel);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addGap(14, 14, 14))
            .addComponent(tabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            if (!saveData()) {
                return;
            }
            Project project = Project.getCurrentProject();
            DbLocalUtils.saveProject(project);
            FreeEedUI.getInstance().updateTitle(project.getProjectName());
        } catch (Exception e) {
            LOGGER.error("Error saving project", e);
            JOptionPane.showMessageDialog(this, "Error saving project");
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void helpLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_helpLabelMouseEntered

    private void helpLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpLabelMouseExited

    private void helpLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMousePressed
        openLuceneSyntaxBrowser();
    }//GEN-LAST:event_helpLabelMousePressed

    private void networkHelpLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkHelpLabelMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_networkHelpLabelMouseEntered

    private void networkHelpLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkHelpLabelMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_networkHelpLabelMouseExited

    private void networkHelpLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkHelpLabelMousePressed
        openUriSyntaxBrowser();
    }//GEN-LAST:event_networkHelpLabelMousePressed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        addFileInput();
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void addNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNetworkButtonActionPerformed
        addUriInput();
    }//GEN-LAST:event_addNetworkButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removeInput();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void explainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_explainButtonActionPerformed
        JOptionPane.showMessageDialog(this,
                "Staging step is always required.\n"
                        + "However, this option will bypass preparing data in zip files.\n"
                        + "Instead, data will be read directly from the source directories or zip files.\n"
                        + "To keep in mind:\n"
                        + "Directories need to be accessible from every Mapper if running on the cluster\n"
                        + "This option may make staging faster but processing slower");
    }//GEN-LAST:event_explainButtonActionPerformed

    private void dataSourceButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSourceButton2ActionPerformed
        loadFormatChoice.setEnabled(true);
    }//GEN-LAST:event_dataSourceButton2ActionPerformed

    private void dataSourceButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSourceButton1ActionPerformed
        loadFormatChoice.setEnabled(false);
    }//GEN-LAST:event_dataSourceButton1ActionPerformed

    private void stagingZipSizeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stagingZipSizeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stagingZipSizeTextActionPerformed

    private void resultTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultTypeActionPerformed

    private void fieldSeparatorChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSeparatorChoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldSeparatorChoiceActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton addNetworkButton;
    private javax.swing.JRadioButton allMetadataRadio;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox createPdfImageCheckBox;
    private javax.swing.JLabel cullingLabel;
    private javax.swing.JPanel cullingPanel;
    private javax.swing.JScrollPane cullingScrollPanel;
    private javax.swing.JTextArea cullingText;
    private javax.swing.JRadioButton dataSourceButton1;
    private javax.swing.JRadioButton dataSourceButton2;
    private javax.swing.ButtonGroup dataSourceButtonGroup;
    private javax.swing.JPanel dataSourcePanel;
    private javax.swing.JCheckBox denistCheck;
    private javax.swing.JButton explainButton;
    private javax.swing.JComboBox fieldSeparatorChoice;
    private javax.swing.JLabel fieldSeparatorLabel;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JPanel imagingPanel;
    private javax.swing.JPanel inputsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel labelMetadataCollected;
    private javax.swing.JComboBox<String> loadFormatChoice;
    private javax.swing.JRadioButton luceneIndexEnabledRadioButton;
    private javax.swing.ButtonGroup metadataButtonGroup;
    private javax.swing.JPanel metadataPanel;
    private javax.swing.JLabel networkHelpLabel;
    private javax.swing.JRadioButton noIndexCreationRadioButton;
    private javax.swing.JCheckBox ocrCheck;
    private javax.swing.JPanel ocrPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox previewCheck;
    private javax.swing.JTextField projectCodeField;
    private javax.swing.JLabel projectCodeLabel;
    private javax.swing.JLabel projectInputsLabel;
    private javax.swing.JList projectInputsList;
    private javax.swing.JScrollPane projectInputsScrollPanel;
    private javax.swing.JTextField projectNameField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox<String> resultType;
    private javax.swing.ButtonGroup searchButtonGroup;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JRadioButton solrIndexEnabledRadioButton;
    private javax.swing.JCheckBox stageInPlaceCheck;
    private javax.swing.JPanel stagingPanel;
    private javax.swing.JLabel stagingZipSizeLabel;
    private javax.swing.JTextField stagingZipSizeText;
    private javax.swing.JRadioButton standardMetadataRadio;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JCheckBox textInMetadataBox;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    private void openLuceneSyntaxBrowser() {
        String url = "http://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/queryparsersyntax.html";
        UtilUI.openBrowser(null, url);
    }

    private void openUriSyntaxBrowser() {
        String url = "http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax";
        UtilUI.openBrowser(null, url);
    }

    private void showData() {
        showProjectInputs();
        showProcessingParametersData();
    }

    @SuppressWarnings("unchecked")
    private void showProjectInputs() {
        Project project = Project.getCurrentProject();
        setTitle("Settings for project " + project.getProjectName());
        projectCodeField.setText(project.getProjectCode());
        projectNameField.setText(project.getProjectName());

        DefaultListModel model = new DefaultListModel();
        String[] dirs = project.getInputs();
        String[] custodians = project.getCustodians(dirs);
        if (dirs != null) {
            for (int i = 0; i < dirs.length; ++i) {
                String custodian = i < custodians.length ? custodians[i] : "";
                String line = custodian + ": " + dirs[i];
                model.addElement(line.trim());
            }
        }
        int projectInputs = (dirs != null ? dirs.length : 0);
        projectInputsLabel.setText("Project inputs (" + projectInputs + ")");
        projectInputsList.setModel(model);
        cullingText.setText(project.getCullingAsTextBlock());
        String envSetting = Settings.getSettings().getEnv();
        project.setEnvironment(envSetting);
    }

    private boolean saveData() {
        boolean result = collectProjectInputs();
        if (!result) {
            return false;
        }
        result = collectProcessingParametersData();
        if (!result) {
            return false;
        }
        return true;
    }

    private boolean collectProjectInputs() {
        Project project = Project.getCurrentProject();
        project.setProjectName(projectNameField.getText());
        ListModel model = projectInputsList.getModel();
        String[] dirs = new String[model.getSize()];
        String[] custodians = new String[model.getSize()];
        for (int i = 0; i < model.getSize(); ++i) {
            String line = (String) model.getElementAt(i);
            int twodots = line.indexOf(":");
            String custodian = line.substring(0, twodots);
            String uri = line.substring(twodots + 2);
            custodians[i] = custodian.trim();
            dirs[i] = uri.trim();
        }
        project.setInputs(dirs);
        project.setCustodians(custodians);
        project.setEnvironment("local");
        project.setCulling(cullingText.getText());
        return true;
    }

    private void removeInput() {
        int index = projectInputsList.getSelectedIndex();
        if (index >= 0) {
            ((DefaultListModel) projectInputsList.getModel()).remove(index);
        }
        projectInputsLabel.setText("Project inputs ("
                + projectInputsList.getModel().getSize() + ")");
    }

    @SuppressWarnings("unchecked")
    private void addFileInput() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        File f = null;
        Settings settings = Settings.getSettings();
        if (settings.getCurrentDir() != null) {
            f = new File(settings.getCurrentDir());
        } else {
            try {
                f = new File(new File(".").getCanonicalPath());
            } catch (IOException e) {
                e.printStackTrace(System.out);
            }
        }
        chooser.setCurrentDirectory(f);
        chooser.showOpenDialog(this);
        File file = chooser.getSelectedFile();
        if (file == null) {
            return;
        }
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "File does not exist:\n" + file.getPath());
            return;
        }
        // Is this a directory with zip files only?
        boolean allZips = false;
        if (file.isDirectory()) {
            if (file.listFiles().length > 0) {
                allZips = true;
                for (File inside : file.listFiles()) {
                    if (!inside.isFile() || !inside.getName().toLowerCase().endsWith(".zip")) {
                        allZips = false;
                        break;
                    }
                }
            }
        }
        if (allZips) {
            int yesNo = JOptionPane.showConfirmDialog(this, "All files in this directory are zip file\n"
                    + "Package them separately as belonging to different custodians?\n"
                    + "(This will generate custodian names to be the same as file name)");
            if (yesNo != JOptionPane.YES_OPTION) {
                allZips = false;
            }
        }
        if (allZips) {
            File[] fileList = file.listFiles();
            Arrays.sort(fileList);
            for (File inside : fileList) {
                String custodian = "";
                String fileName = inside.getName();
                int lastUnderscore = fileName.lastIndexOf("_");
                if (lastUnderscore >= 0) {
                    custodian = fileName.substring(lastUnderscore + 1, fileName.length() - 4);
                }
                ((DefaultListModel) projectInputsList.getModel()).
                        addElement(custodian + ": " + inside.getPath());
            }
        } else {
            String custodian = "";
            if (dataSourceButton1.isSelected()) {
                custodian = JOptionPane.showInputDialog("Please enter custodian");
                if (custodian == null) {
                    return;
                }
            }
            ((DefaultListModel) projectInputsList.getModel()).addElement(custodian + ": " + file.getPath());
            projectInputsLabel.setText("Project inputs ("
                    + projectInputsList.getModel().getSize() + ")");
        }
        settings.setCurrentDir(file.getPath());
    }

    @SuppressWarnings("unchecked")
    private void addUriInput() {
        String uri = JOptionPane.showInputDialog(this, "Enter input's network locations as URI");
        if (uri == null) {
            return;
        }
        // TODO verify URI?        
        String custodian = JOptionPane.showInputDialog("Please enter custodian");
        if (custodian == null) {
            return;
        }
        ((DefaultListModel) projectInputsList.getModel()).addElement(custodian + ": " + uri);
    }

    private void showProcessingParametersData() {
        Project project = Project.getCurrentProject();
        int index = 0;
        String fieldSeparator = project.getFieldSeparator();
        switch (fieldSeparator) {
            case "tab":
                index = 0;
                break;
            case "hex_one":
                index = 1;
                break;
            case "pipe":
                index = 2;
                break;
            case "carret":
                index = 3;
                break;
            case "DAT":
                index = 4;
                break;
        }
        resultType.setSelectedIndex(project.getMetadataFileExt().equals("CSV") ? 0 : 1);
        fieldSeparatorChoice.setSelectedIndex(index);
        allMetadataRadio.setSelected("all".equals(project.getMetadataCollect()));
        standardMetadataRadio.setSelected("standard".equals(project.getMetadataCollect()));
        denistCheck.setSelected(project.isRemoveSystemFiles());
        textInMetadataBox.setSelected(project.isTextInMetadata());
        stagingZipSizeText.setText(Double.toString(project.getGigsPerArchive()));
        ocrCheck.setSelected(project.isOcrEnabled());

        luceneIndexEnabledRadioButton.setSelected(project.isLuceneIndexEnabled());
        solrIndexEnabledRadioButton.setSelected(project.isSendIndexToSolrEnabled());
        if (!project.isLuceneIndexEnabled() && !project.isSendIndexToSolrEnabled()) {
            noIndexCreationRadioButton.setSelected(true);
        }

        createPdfImageCheckBox.setSelected(project.isCreatePDF());
        previewCheck.setSelected(project.isPreview());
        dataSourceButton1.setSelected(project.getDataSource() == Project.DATA_SOURCE_EDISCOVERY);
        dataSourceButton2.setSelected(project.getDataSource() == Project.DATA_SOURCE_LOAD_FILE);
        loadFormatChoice.setEnabled(dataSourceButton2.isSelected());
        stageInPlaceCheck.setSelected(project.isStageInPlace());
        loadFormatChoice.setSelectedItem(Project.getCurrentProject().getLoadFileFormat().toUpperCase());
    }

    private boolean collectProcessingParametersData() {
        Project project = Project.getCurrentProject();
        try {
            int index = fieldSeparatorChoice.getSelectedIndex();
            switch (index) {
                case 0:
                    project.setFieldSeparator("tab");
                    break;
                case 1:
                    project.setFieldSeparator("hex_one");
                    break;
                case 2:
                    project.setFieldSeparator("pipe");
                    break;
                case 3:
                    project.setFieldSeparator("carret");
                    break;
                case 4:
                    project.setFieldSeparator("DAT");
                    break;
            }
            project.setMetadataCollect(standardMetadataRadio.isSelected() ? "standard" : "all");
            project.setRemoveSystemFiles(denistCheck.isSelected());
            project.setTextInMetadata(textInMetadataBox.isSelected());
            project.setGigsPerArchive(Double.parseDouble(stagingZipSizeText.getText()));
            project.setOcrEnabled(ocrCheck.isSelected());
            project.setLuceneIndexEnabled(luceneIndexEnabledRadioButton.isSelected());
            project.setSendIndexToSolrEnabled(solrIndexEnabledRadioButton.isSelected());
            project.setCreatePDF(createPdfImageCheckBox.isSelected());
            project.setPreview(previewCheck.isSelected());
            project.setDataSource(dataSourceButton1.isSelected() ? Project.DATA_SOURCE_EDISCOVERY : Project.DATA_SOURCE_LOAD_FILE);
            project.setStageInPlace(stageInPlaceCheck.isSelected());
            project.setLoadFileFormat((String) loadFormatChoice.getSelectedItem());
            project.setMetadataFileExt((String) resultType.getSelectedItem());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            Project project = Project.getCurrentProject();
            if (project == null) {
                JOptionPane.showMessageDialog(rootPane, "Create or open a project first");
                return;
            }
            myInit();
            projectCodeField.setEnabled(false);
            showData();
        }
        super.setVisible(b);
    }

    private void myInit() {
        fieldSeparatorChoice.removeAllItems();
        fieldSeparatorChoice.addItem("tab (\\t)");
        fieldSeparatorChoice.addItem("non-ascii one (x0001)");
        fieldSeparatorChoice.addItem("pipe (|)");
        fieldSeparatorChoice.addItem("carret (^)");
        fieldSeparatorChoice.addItem("DAT");
    }
}
